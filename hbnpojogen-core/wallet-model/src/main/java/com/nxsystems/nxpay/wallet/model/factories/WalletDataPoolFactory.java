package com.nxsystems.nxpay.wallet.model.factories;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import com.nxsystems.nxpay.wallet.model.*;
import com.nxsystems.nxpay.wallet.model.factories.WalletDataPoolFactory;
import org.springframework.stereotype.Component;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import com.felees.hbnpojogen.randomlib.data.dataGeneration.BasicDataGenerator;


/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class WalletDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"Account", "Role", "Client"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("Account", "Client");
 		tableDeps.put("ClientRole", "Client");
 		tableDeps.put("ClientRole", "Role");
	}

    /**
     * Data pool factory for Account.
     * @return Account A Account object
     */
    public static Account getAccount() {

        Account account =  getAccount(
	        getClient());

		return account;
       
    }

     /**
     * Data pool factory for Account.
     * @param client A valid Client object
     * @return Account A Account object
     */
    public static Account getAccount(Client client) {
        Account account = new Account();     
        account.setBalance(BasicDataGenerator.generateRandomDecimal(9, 2));
        account.setClient(client);
        account.setNumber(BasicDataGenerator.generateRandomString(16));

        return account;
    }

    /**
     * Data pool factory for Client.
     * @return ClientA Client object
     */
    public static Client getClient() {

        Client client = new Client();    
        
        client.setApiKey(BasicDataGenerator.generateRandomString(2147483647));
        client.setName(BasicDataGenerator.generateRandomString(2147483647));

        return client;
    }

    /**
     * Data pool factory for Role.
     * @return RoleA Role object
     */
    public static Role getRole() {

        Role role = new Role();    
        
        role.setDescription(BasicDataGenerator.generateRandomString(2147483647));
        role.setName(BasicDataGenerator.generateRandomString(2147483647));

        return role;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}
