<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"    
    xmlns:jee="http://www.springframework.org/schema/jee"

    xmlns:jms="http://www.springframework.org/schema/jms"
    xmlns:lang="http://www.springframework.org/schema/lang"

    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"

    xmlns:util="http://www.springframework.org/schema/util"
#if ($springData)
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
#end	
    xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans-${springVersion}.xsd
              http://www.springframework.org/schema/aop
              http://www.springframework.org/schema/aop/spring-aop-${springVersion}.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context-${springVersion}.xsd
              http://www.springframework.org/schema/jee
              http://www.springframework.org/schema/jee/spring-jee-${springVersion}.xsd
#if ($springData)
			  http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
#end
              http://www.springframework.org/schema/jms
              http://www.springframework.org/schema/jms/spring-jms-${springVersion}.xsd
              http://www.springframework.org/schema/lang
              http://www.springframework.org/schema/lang/spring-lang-${springVersion}.xsd
              http://www.springframework.org/schema/tx
              http://www.springframework.org/schema/tx/spring-tx-${springVersion}.xsd
              http://www.springframework.org/schema/util
              http://www.springframework.org/schema/util/spring-util-${springVersion}.xsd">
#if ($springData)
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
	    <property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
#else

#if ($lazyConnections)
   	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" autowire="#if ($v2SpringVersion)autodetect#{else}byType#end">
   	
		$transactionManagerItems
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
	</bean>
#else
     <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" autowire="#if ($v2SpringVersion)autodetect#{else}byType#end">
				$transactionManagerItems
	</bean>
#end
#end
    <bean id="persistenceManager" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    

#if (!$suppressPlaceholder)
    <bean class="org.springframework.beans.factory.config.#if ($propOverride)PropertyOverrideConfigurer#{else}PropertyPlaceholderConfigurer#end">
	   #if ($propOverride)<property name="ignoreResourceNotFound"><value>true</value></property>#end
   <!--  In the properties file, #if ($propOverride)override #{else}define #{end}the items you need in this format:
#if ($lazyConnections)
	mainDataSource.user=root
	mainDataSource.password=abcdefgh
#else
   sessionFactory.hibernateProperties[hibernate.connection.username]=root
   sessionFactory.hibernateProperties[hibernate.connection.password]=abcdefgh
#end
    -->
   		<property name="location">
   			<!--  You may use file:d:/temp/db.properties etc here -->
    		<value>classpath:${projectname}.db.properties</value>
    	</property>
	</bean>
#end

#if ($useLDAPImport)
	<!-- Import the required ldap beans from some other package. -->
	<import resource="beans.ldap.xml"/>
	
	
	<bean id="ldap" class="com.ecs.library.ldap.LDAPPropertyPlaceholderConfigurer">
		<constructor-arg ref="ldapTemplate" />
		<!-- Override your ldap CN here -->
		<constructor-arg value="${ldapCn}" />
	</bean>    		
#end

#if ($useLDAP)
   <!-- LDAP settings -->
   <bean id="contextSource" class="com.ecs.library.ldap.SecureLdapContextSource">
   		<property name="certFilename" value="/cacert.crt" />
		<property name="clientCertFilename" value="/clientcert.p12" />
		<property name="privateKeyPassword"  value="" />
		<property name="url" value="$ldapServer" />
        <property name="base" value="$ldapBase" />
   </bean>

   <!-- Create a template for use with the com.ecs.library.ldap.LDAPPropertyPlaceholderConfigurer -->
   <bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
      <constructor-arg>
      	<ref bean="contextSource" />
      </constructor-arg>
   </bean>

    <bean class="com.ecs.library.ldap.LDAPPropertyPlaceholderConfigurer">
    	<constructor-arg ref="ldapTemplate" />
    	<!-- Override your ldap CN here --> 
    	<constructor-arg value="${ldapCn}" />  
	</bean>
#end
	
#if ($lazyConnections)
#if ($pool.equals("C3P0"))
       <!-- C3P0 Configuration -->
	<bean id="mainDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="$driverClass" />
		<property name="jdbcUrl" value="$dbUrl" />
        <property name="user" value="$dbUsername"/>
        <property name="password" value="$dbPassword"/>
        <property name="idleConnectionTestPeriod" value="$dbIdleConnectionTestPeriod"/>
        <property name="maxIdleTime" value="$dbMaxIdle"/>         
        <property name="maxPoolSize" value="$dbMaxPool"/>
        <property name="minPoolSize" value="$dbMinPool"/>
        <property name="initialPoolSize" value="$dbInitPool"/>          
        <property name="maxStatements" value="$dbMaxStatements"/>            
        <property name="acquireIncrement" value="$dbAcquireIncrement"/>                              
	</bean>
#else #if ($pool.equals("HIKARICP"))
 <bean id="mainDataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="shutdown">
        <property name="username" value="$dbUsername" />
        <property name="password" value="$dbPassword" />
        <property name="jdbcUrl" value="$dbUrl" />
        <property name="driverClassName" value="$driverClass" />
        <property name="maximumPoolSize" value="$dbMaxPool" />
    </bean>
    
#else #if ($pool.equals("BONECP"))

#if ($useDynamicLdapDataSource)
	<bean id="dynamicDataSourceProxy" class="com.jolbox.bonecp.spring.DynamicDataSourceProxy">
		<property name="targetDataSource">
			<ref local="mainDataSource" />
		</property>
	</bean>
#end
    <!-- BoneCP configuration -->
    <bean id="mainDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
       <property name="driverClass" value="$driverClass" />
       <property name="jdbcUrl" value="$dbUrl" />
       <property name="username" value="$dbUsername"/>
       <property name="password" value="$dbPassword"/>
       <property name="maxConnectionsPerPartition" value="$dbMaxPool"/>
       <property name="minConnectionsPerPartition" value="$dbMinPool"/>
       <property name="partitionCount" value="$dbPartitions"/>
        <property name="logStatementsEnabled" value="false"/>
       <!-- The following are marked as optional in the LDAP dbConnection object.  
       <property name="idleConnectionTestPeriodInMinutes" value="$dbIdleConnectionTestPeriod"/>
       <property name="idleMaxAgeInMinutes" value="$dbMaxIdle"/>      
       <property name="acquireIncrement" value="$dbAcquireIncrement"/>                              
       <property name="preparedStatementCacheSize" value="$dbMaxStatements"/>
       <property name="releaseHelperThreads" value="3"/>
       -->
    </bean>

#else #if ($pool.equals("JNDI"))
	<!-- Obtain a datasource connection via JNDI -->
	<bean id="mainDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
         <property name="jndiName" value="$jndiRef" />
         <property name="resourceRef" value="true" />
	 </bean> 
#end 
#end
#end
#end
	<!-- Obtain a datasource connection via JNDI. This section will go if we make the transition to jndi (just repeated here
	to make it easier for others to change without flipping over to synchronizer again.  
	<bean id="mainDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
         <property name="jndiName" value="$jndiRef" />
         <property name="resourceRef" value="true" />
	 </bean> 
	 -->

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
#if ($useDynamicLdapDataSource)		
			<ref local="dynamicDataSourceProxy" />
#else 	
			<ref local="mainDataSource" />
#end				
		</property>
	</bean>
#end	
	
#if ($springData)

#foreach ($level in $repoPackages)
		<jpa:repositories base-package="$level" $factoryClass />
#end
	
    <!-- Hibernate SessionFactory -->
    <bean name="sessionFactory" factory-bean="entityManagerFactory" factory-method="getSessionFactory" />
    
    	<bean id="entityManagerFactory"
    class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <property name="persistenceUnitName" value="puName" />
    <property name="dataSource" ref="dataSource" />
        <property name="jpaProperties">
    <props>
    				<prop key="hibernate.dialect">$dialect</prop>
				<prop key="hibernate.generate_statistics">false</prop>
				<prop key="hibernate.show_sql">false</prop>
			    <prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.id.new_generator_mappings">true</prop>
    				<prop key="hibernate.id.optimizer.pooled.prefer_lo">true</prop>
            		<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
            		<prop key="net.sf.ehcache.configurationResourceName">/ehcache-model.xml</prop>
       </props>
    </property>
    
    		<property name="packagesToScan">
			<list>
#foreach ($level in $packages)
				<value>$level.**</value>
#end
			</list>
		</property>
    <property name="jpaVendorAdapter">
        <bean 
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            <property name="databasePlatform" value="org.hibernate.dialect.PostgreSQL9Dialect" />
			
			 
        </bean>
    </property>
</bean>
    
    
#else
    
    
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" #if ($v2SpringVersion)autowire="autodetect"#end>
#if ($lazyConnections)	
		<property name="dataSource" ref="dataSource" />
#end
	
		${sessionfactoryitems}
 		<property name="packagesToScan">
			<list>
#foreach ($level in $packages)
				<value>$level.**.*</value>
#end
			</list>
		</property>
			 
		<property name="hibernateProperties">
			<props>
#if (!$lazyConnections)
				<prop key="hibernate.connection.driver_class">$driverClass</prop>
				<prop key="hibernate.connection.url">$dbUrl</prop>
				<prop key="hibernate.connection.username">$dbUsername</prop>
				<prop key="hibernate.connection.password">$dbPassword</prop>
#if ($pool.equals("BONECP"))
			    <prop key="hibernate.connection.provider_class">com.jolbox.bonecp.BoneCPConnectionProvider</prop>
				<prop key="bonecp.idleMaxAgeInMinutes">$dbMaxIdle</prop>
				<prop key="bonecp.idleConnectionTestPeriodInMinutes">$dbIdleConnectionTestPeriod</prop>
				<prop key="bonecp.partitionCount">$dbPartitions</prop>
				<prop key="bonecp.acquireIncrement">$dbAcquireIncrement</prop>
				<prop key="bonecp.maxConnectionsPerPartition">$dbMaxPool</prop>
 				<prop key="bonecp.minConnectionsPerPartition">$dbMinPool</prop>
 				<prop key="bonecp.preparedStatementCacheSize">$dbMaxStatements</prop>
 				<prop key="bonecp.releaseHelperThreads">3</prop>
#else
				<prop key="hibernate.c3p0.acquire_increment">$dbAcquireIncrement</prop>
				<prop key="hibernate.c3p0.idle_test_period">$dbIdleConnectionTestPeriod</prop>
				<prop key="hibernate.c3p0.max_size">$dbMaxPool</prop>
				<prop key="hibernate.c3p0.min_size">$dbMinPool</prop>
				<prop key="hibernate.c3p0.max_statements">$dbMaxStatements</prop>
#end
#end 
				<prop key="hibernate.dialect">$dialect</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.show_sql">false</prop>
			    <prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider</prop>
			</props>
		</property>
	</bean>
#end  

	<!-- Switch on transactions -->
	<tx:annotation-driven />

#foreach ($level in $packages)
	<context:component-scan base-package="${level}"/>
#end
	<context:component-scan base-package="test.${toplevel}"/>
#if (!$embedPersistence)
	<context:component-scan base-package="HibernateUtils"/>
#end
$additionalContextItems

<!-- Add your pointcuts to provide transactions/session management here. Alternately, use the @Transaction annotation in your service layer -->
<!--   
	 <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>         
            <tx:method name="*" read-only="false"/>
        </tx:attributes>
    </tx:advice>
    
     <aop:config>
        <aop:pointcut id="testOperation" expression="execution(* test.${toplevel}.DAOTest.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="testOperation"/>
    </aop:config>
-->
   
 </beans>
