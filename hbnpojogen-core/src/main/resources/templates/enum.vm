package ${packagename};
import java.util.Map;
import java.util.HashMap;
import $stringValuedEnum;
/**
 * Defines the ${enumName} enumeration.
 * 
 * @author autogenerated
 *
 */
public enum ${enumName}  implements StringValuedEnum {

#set ($count = 0)
#foreach ( $enum in $enums )
#set ( $count = $count+1 )
	/** Enum Constant. */
	$enum#if ($count == $enumCount);#else,#end

#end
#macro(state)
#foreach ($other in ${others.entrySet()}), $other.getValue().getClass().getSimpleName() $other.getKey()#end
#end
	/**
	 * Internal storage of status field value, see the Enum spec for
 	 * clarification.
 	 */
	private final String status;
#foreach ($other in $others.entrySet())
	/** Internal state. */
	private final $other.getValue().getClass().getSimpleName() $other.getKey();	  
#end
	
	/**
	 * Enum constructor for ActiveState.
	 * @param state Value.
#foreach ($other in $others.keySet())
	 * @param $other enum value 
#end
	 */
	${enumName}(final String state#state()) {
		this.status = state;
#foreach ($other in $others.keySet())
		this.$other = $other;
#end
	}
	
	/** Construct a map for reverse lookup. */
	private static Map<String, ${enumName}> valueMap = new HashMap<String, ${enumName}>();
#foreach ($other in $others.entrySet())
	/** Construct a map for reverse lookup of $other.getKey(). */
	private static Map<$other.getValue().getClass().getSimpleName(), ${enumName}> ${other.getKey()}Map = new HashMap<$other.getValue().getClass().getSimpleName(), ${enumName}>();
#end

    static {
    	// construct hashmap for later possible use.
        for (${enumName} unit : values()) {
            valueMap.put(unit.getValue(), unit);
#foreach ($other in $others.entrySet())
            ${other.getKey()}Map.put(unit.get${this.upFirst($other.getKey())}(), unit);
#end
        }
    }
    
	/**
	 * Current string value stored in the enum.
	 * 
	 * @return string value.
	 */
	public String getValue() {
		return this.status;
	}

#foreach ($other in $others.entrySet())
	/**
	 * Current $other.getKey() value stored in the enum.
	 * 
	 * @return $other.getValue().getClass().getSimpleName() value representing $other.getKey().
	 */
	public $other.getValue().getClass().getSimpleName() get${this.upFirst($other.getKey())}() {
		return this.${other.getKey()};
	}
#end	
	/**
     * Perform a reverse lookup (given a value, obtain the enum).
     * 
     * @param value to search
     * @return Enum object.
     */
    public static ${enumName} lookupEnum(String value) {
        return ${enumName}.valueMap.get(value);
    }
#foreach ($other in $others.entrySet())
	/**
     * Perform a reverse lookup (given $other.getKey(), obtain the enum).
     * 
     * @param $other.getKey() to search
     * @return Enum object.
     */
    public static ${enumName} lookupEnumBy$other.getKey()($other.getValue().getClass().getSimpleName() $other.getKey()) {
        return ${enumName}.${other.getKey()}Map.get($other.getKey());
    }
#end
}
