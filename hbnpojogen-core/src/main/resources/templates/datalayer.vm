package ${packagename};

#foreach ($import in $imports)
import $import;
#end
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.ReplicationMode;
import org.hibernate.Session;
import java.util.Collection;
#if (!$interface)
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;
import GenericDAO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.hibernate.LockOptions;
import org.hibernate.SessionFactory;
import org.hibernate.proxy.HibernateProxy;
#end
#macro(classname)
${class.className}#end
#macro(cn)
${class.className}#end
/** 
 * Data layer.
 * @author autogenerated
 */
#if ($interface)
public interface DataLayer${catalog} {

#else
@org.springframework.stereotype.Component
public class DataLayer${catalog}Impl implements DataLayer${catalog} {
	/** Singleton reference to this class. */
	private static DataLayer${catalog} instance;
	/** map lock. */
	private static Object daoMapLock = new Object();

	/** Internal handle. */
	private static Map<Class<?>, GenericDAO<?, ?>> daoMap = null; 
	
		/** Inner handle. */
	private static ApplicationContext context;
 /** Sessionfactory in use. Filled in by Spring. */ 
    private SessionFactory sessionFactory = null;
	
	/** Handle to get back ourselves and perform correct injection. 
	 * @param ctxt filled by spring
	 */
	@Autowired
	public void setApplicationContext(ApplicationContext ctxt) {
		DataLayer${catalog}Impl.context = ctxt;
	}
	
	
		
#end
#if (!$class.isEmbeddable())
#if (!$interface)
 	/**
     * Set session factory.
     * @param sessionFactory sessionfactory to use. 
     */
    @Autowired
    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }
    
    /** 
	* Returns a DAO instance of the given type.
	* @param <T> Type
	* @param persistentObject to get
	* @return GenericDAO<T, ?> object
     */
    @SuppressWarnings("unchecked")
    private <T> GenericDAO<T, ?> getDAO(final T persistentObject) {
		T persistent = persistentObject;

		synchronized (daoMapLock) {
    		if (daoMap == null) {
    			daoMap = new ConcurrentHashMap<Class<?>, GenericDAO<?, ?>>(); 
#foreach ($class in $classes)
#if (!$class.isEmbeddable())
	 	   		daoMap.put(#cn().class, ${class.getHibernateDAO()}.get${class.className}Dao());
#end
#end
    		}
		 }
		if (persistentObject instanceof HibernateProxy) {
			persistent = (T) ((HibernateProxy) persistentObject).getHibernateLazyInitializer().getImplementation();
		} 
		
		GenericDAO<T, ?> result = (GenericDAO<T, ?>) daoMap.get(persistent.getClass());
		if (result == null) {
			throw new IllegalAccessError("The given object is of an incorrect type. ");
		}
		return result;
    }

#end
    /**
     * Deletes the given object from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to delete
     */
    #if (!$interface)public #end<T> void delete(T persistentObject)#if ($interface);#else {
    	    	getDAO(persistentObject).delete(persistentObject);
    }#end

    /**
     * Refresh the object $class.className from disk.
     * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to reload
     */
    #if (!$interface)public #end<T> void refresh(T persistentObject)#if ($interface);#else {
	    	getDAO(persistentObject).refresh(persistentObject);
    }#end


    /**
     * Saves the given object to disk.
     * @param persistentObject Object to save
	 * @param <T> A DataLayerObject-derived type
     * @return Identifier of saved object 
     */
    #if (!$interface)public #end<T> Serializable save(T persistentObject)#if ($interface);#else {
        return getDAO(persistentObject).save(persistentObject);
    }#end

    /**
     * Saves or updates the given $class.className object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to save 
     */
    #if (!$interface)public #end<T> void saveOrUpdate(T persistentObject)#if ($interface);#else {
        getDAO(persistentObject).saveOrUpdate(persistentObject);
    }#end

    /**
     * Updates the given object to disk.
	 * @param <T> A DataLayerObject-derived type
     * @param persistentObject Object to update 
     */
    #if (!$interface)public #end<T> void update(T persistentObject)#if ($interface);#else {
        getDAO(persistentObject).update(persistentObject);
    }#end

#end

#foreach ($class in $classes)
#if (!$class.isEmbeddable())

    /** Deletes an object of a given Id. 
     * Will load the object internally so consider using delete (#classname() obj) directly
     * @param id Identifier to delete
     */
    #if (!$interface)public #{end}void delete#cn()(final ${class.getTypeOfId()} id)#if ($interface);#else  {
        ${class.getHibernateDAO()}.get${class.className}Dao().delete(load#cn()(id));
    }#end

	
    /**
     * Loads the given Object.
     * @param id Identifier to load
     * @return a #classname() object
     */
    #if (!$interface)public #end#classname() load#cn()(final ${class.getTypeOfId()} id)#if ($interface);#else {
        return ${class.getHibernateDAO()}.get${class.className}Dao().load(id);
    }#end

    /**
     * Loads the given Object.
     * @param id Id to load
     * @return An object of type T
     */
     #if (!$interface)public #{end}#classname() get#cn()(final ${class.getTypeOfId()} id)#if ($interface);#else {
        return ${class.getHibernateDAO()}.get${class.className}Dao().get(id);
    }#end
  
#end
#end
#if (!$interface)
    /** Returns a singleton instance of this class.
     * @return an singleton instance
     */
    public static synchronized DataLayer${catalog} getInstance() {
        
        if (instance == null) {
        	if (context == null) {
        		throw new IllegalStateException("Context is null. Make sure Spring is initialized.");
        	}
     		instance = (DataLayer${catalog}) context.getBean("${beanname}");
        }
        
        return instance; 
    }
#end
    /** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     #if (!$interface)public #{end}Query createQuery(final String query)#if ($interface);#else {
        return this.sessionFactory.getCurrentSession().createQuery(query);
    }#end

    /** Returns a criteria handle.
     * @param criteria Criteria to use
     * @return A criteria instance
     */
     #if (!$interface)public #{end}Criteria createCriteria(final String criteria)#if ($interface);#else {
        return this.sessionFactory.getCurrentSession().createCriteria(criteria);
    }#end

    /** Returns a Query handle based on your package-level named query.
     * @param query Query to use
     * @return A query instance
     */
     #if (!$interface)public #{end}Query getNamedQuery(final String query)#if ($interface);#else {
        return this.sessionFactory.getCurrentSession().getNamedQuery(query);
    }#end

    /** Create a new Criteria instance, for the given entity class, or a superclass of an entity class.
	* @param persistentObject a class, which is persistent, or has persistent subclasses 
	* @return Criteria instance
	*/
	@SuppressWarnings("rawtypes")
	#if (!$interface)public #{end}Criteria createCriteria(Class persistentObject)#if ($interface);#else {
        return this.sessionFactory.getCurrentSession().createCriteria(persistentObject);
    }#end

    /** Flushes the currently open session.
	*/
	#if (!$interface)public #{end}void flushSession()#if ($interface);#else {
        this.sessionFactory.getCurrentSession().flush();
    }#end

    /** Clears the currently open session.
	*/
	#if (!$interface)public #{end}void clearSession()#if ($interface);#else {
        this.sessionFactory.getCurrentSession().clear();
    }#end

    /** Flushes and clears the currently open session.
	*/
	#if (!$interface)public #{end}void flushAndClearSession()#if ($interface);#else {
		flushSession();
		clearSession();
    }#end

	/** Call currentSession.replicate.
	 * @param obj to replicate
	 * @param replicationMode mode
	 */ 
	#if (!$interface)public #{end}void replicate(Object obj, ReplicationMode replicationMode)#if ($interface);#else {
		this.sessionFactory.getCurrentSession().replicate(obj, replicationMode);
	}#end

	/** Hibernate Merge. 
	 * @param obj to merge
	 * @return obj merged.
	 */
	#if (!$interface)public #{end}Object merge(Object obj)#if ($interface);#else {
		return this.sessionFactory.getCurrentSession().merge(obj);
	}#end

	/** Returns the current session.
	 * @return the currently active session
	 */
	#if (!$interface)public #{end}Session getCurrentSession()#if ($interface);#else {
		return this.sessionFactory.getCurrentSession();
	}#end

	/** Returns a query handle.
     * @param query Query to use
     * @return A query instance
     */
     #if (!$interface)public #{end}SQLQuery createSQLQuery(final String query)#if ($interface);#else {
        return this.sessionFactory.getCurrentSession().createSQLQuery(query);
    }#end

    /** Remove this instance from the session cache. 
	 * Changes to the instance will not be synchronized with the database
	 * @param obj object to evict
	 */
	#if (!$interface)public #{end}void evict(Object obj)#if ($interface);#else {
        this.sessionFactory.getCurrentSession().evict(obj);
    }#end

    /**
     * Return the persistent instance of the given entity class with the given 
     * identifier, or null if there is no such persistent instance. 
     * (If the instance, or a proxy for the instance, is already 
     * associated with the session, return that instance or proxy)
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return a persistent instance or null
     * @throws HibernateException
     */
	#if (!$interface)public #{end}Object get(Class<?> clazz, Serializable id) throws HibernateException#if ($interface);#else {
        return this.sessionFactory.getCurrentSession().get(clazz, id);
    }#end    
	


    /**
     * Return the persistent instance of the given entity class with the given identifier, assuming that the instance exists.
     *You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.
     *
     * @param clazz a persistent class
     * @param id a valid identifier of an existing persistent instance of the class
     * @return the persistent instance or proxy
     * @throws HibernateException
     */
	#if (!$interface)public #{end}Object load(Class<?> clazz, Serializable id) throws HibernateException#if ($interface);#else {
        return this.sessionFactory.getCurrentSession().load(clazz, id);  
    }#end

	/**
	 * Reattaches the given entity to the current session using LockMode.NONE
	 *
	 * @param entity to reattach
	 */
	#if (!$interface)public #{end}void reattachEntityWithNoLock(IPojoGenEntity entity)#if ($interface);#else {
		if (entity != null) {
            		this.sessionFactory.getCurrentSession().buildLockRequest(LockOptions.NONE).lock(entity);
    		}
	}#end

	/**
	 * Reattaches the given entities to the current session.
	 *
	 * @param entities to attach
	 */
	#if (!$interface)public #{end}void reattachEntitiesWithNoLock(Collection<? extends IPojoGenEntity> entities)#if ($interface);#else {
   		if (entities != null) {
		       for (IPojoGenEntity entity : entities) {
            		this.sessionFactory.getCurrentSession().buildLockRequest(LockOptions.NONE).lock(entity);
        		 }
    		}
	}#end
}

