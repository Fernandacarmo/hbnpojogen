package ${packagename};
###
######## Macros
#macro(doCalcFullType)
###
## expand Sets using some type eg HashSet, ArrayList, etc
#if ( $property.oneToMany)
   #set ($fullType =  "Set<$property.JavaType>")
   #set ($fullJDType = "Set&lt;$property.JavaType&gt;") 
#else 
#if ( $property.manyToMany )
	#set ($fullType =  "Set<$property.manyToManyLink.dstProperty.clazz.className>")
	#set ($fullJDType =  "Set&lt;$property.manyToManyLink.dstProperty.clazz.className&gt;")
#else
   #set ($fullType =  "$property.JavaType")
   #set ($fullJDType =  "$property.JavaType")
#end
#end
#end 
#macro(lazyManyToMany)
#if ($property.isManyToManyLazyEnabledByConfig())LAZY#{else}EAGER#end
#end
#macro(lazyOneToMany)
#if ($property.isOneToManyLazyEnabledByConfig())LAZY#{else}EAGER#end
#end
#macro(lazyOneToOne)
#if ($property.isOneToOneLazyEnabledByConfig())LAZY#{else}EAGER#end
#end
#macro(lazyManyToOne)
#if ($property.isManyToOneLazyEnabledByConfig())LAZY#{else}EAGER#end
#end
#macro(doAnnotations)
#doCalcFullType()
#if ( $property.isOneToOne())
#OneToOneAnnotation($property)
#end
#if ( !$property.isComposite() && !$property.isOneToOne())
#if ( $property.isGeneratedValueAuto() )
	@GeneratedValue(strategy = GenerationType.AUTO)
#end
#if ( $property.isGeneratedValueGUID() )
	@GeneratedValue(generator = "hibernate-guid")
#end
#if ( $property.isGeneratedValueUUID() )
	@GeneratedValue(generator = "hibernate-uuid")
#end
#if ( $property.isGeneratedValueIdAware() )
	@GeneratedValue(generator = "hibernate-idaware")
#end
#if ( $property.isGeneratedValueCustom() )
	@GeneratedValue(generator = "hibernate-custom")
#end
#if ( $property.isGeneratedValuePKS() )
	@GeneratedValue(generator = "hibernate-pks")
#end
#if ( $property.isGeneratedValueSequence() )
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "$property.sequenceHibernateRef")
#end
#end	
#if ( $property.OneToMany && (!( $class.embeddable || $class.isCompositePrimaryKey() )))
#oneToManyAnnotation($property)
#end
#if ( $property.ManyToOne)
#manyToOneAnnotation($property)
#end
#if ( $property.ManyToMany )
#doManyToMany($property)
#end
#if ( $property.isDefaultValue() )
	@org.hibernate.annotations.Generated(
		org.hibernate.annotations.GenerationTime.INSERT
	)
#end
#if($property.enumType)
#if ($class.TableObj.ContainsScrubbedEnum == true)
	@Type(type = "enumType", parameters = {@Parameter(name = "enum", value = "${this.getEnumPackagePath($class)}.${fullType}")})
#else
	@Enumerated(EnumType.STRING)
#end	
#end
#end
#macro(prefix)
#if ( $property.isBooleanField() && !$property.isIdField() )is#{else}get#end
#end
##
#macro(doClassType)
#if ($class.classType != "")$class.classType #end
#end
#macro(doManyToMany $property)
#if ( $property.isManyToManyInverseSide() )
	@ManyToMany( fetch = FetchType.#lazyManyToMany(), mappedBy = "${property.manyToManyLink.dstProperty.nicePropertyName}"#if ($property.isManyToManyCascadeEnabledByConfig()), cascade = { CascadeType.PERSIST, CascadeType.MERGE } #{end} )
#else
	@ManyToMany#if ($property.isManyToManyCascadeEnabledByConfig())( fetch = FetchType.#lazyManyToMany(), cascade = { CascadeType.PERSIST, CascadeType.MERGE }  )#{end}

	@JoinTable(
		name = "$property.ManyToManyLink.linkClass.tableObj.dbName",
		catalog = "$property.ManyToManyLink.linkClass.tableObj.dbCat",
		joinColumns = {@JoinColumn(name = "$property.ManyToManyLink.srcPropertyBounce.fieldObj.name")},
		inverseJoinColumns = {@JoinColumn(name = "$property.ManyToManyLink.dstPropertyBounce.fieldObj.name")}
	)
#end
#end
#macro(oneToManyAnnotation $property)
 	@OneToMany( fetch = FetchType.#lazyOneToMany(), ${this.getOneToManyCascadeEnabled($property)}mappedBy = "#if (${property.oneToManyLink.clazz.isEmbeddable()})id.#{end}$property.oneToManyLink.propertyName"  )
#if ($property.isOneToManyCascadeEnabledByConfig())
 	@org.hibernate.annotations.Cascade($property.getCascadeTypeOneToMany())
#end
#end
#macro(manyToOneAnnotation $property)
	@ManyToOne( ${this.getManyToOneCascadeEnabled($property)}fetch = FetchType.#lazyManyToOne() )
#if ($property.isManyToOneCascadeEnabledByConfig())
	@org.hibernate.annotations.Cascade($property.getCascadeTypeManyToOne())
#end
#if ( ${property.getManyToOneKey().keyLinks.size()} == 1)
	@Basic( optional = $property.isNullable() )
	@JoinColumn(name = "${property.getManyToOneKey().keyLinks.entrySet().iterator().next().getKey()}"#if (${property.isNaturalManyToOneLink()}), referencedColumnName = "$property.getManyToOneKey().keyLinks.entrySet().iterator().next().getValue()"#end, nullable = $property.isNullable() #if($class.embeddable), insertable = false, updatable = false #end)
#else
	@JoinColumns({
#foreach ($join in ${property.getManyToOneKey().keyLinks.entrySet()})
		@JoinColumn(name = "$join.getKey()", referencedColumnName = "$join.getValue()" )#if ($velocityCount < ${property.getManyToOneKey().keyLinks.size()}),#end
		
#end
	})
#end
#end
#macro(OneToOneAnnotation $property)
#if ($property.isOneTooneInverseSide())
#if ($property.isToOneCascadeEnabledByConfig())
	@org.hibernate.annotations.Cascade($property.getCascadeTypeOneToOne()) 
#end
	@OneToOne( fetch = FetchType.#lazyOneToOne(), #if ($property.isOneToOneCascadeEnabledByConfig())cascade = CascadeType.ALL, #{end}mappedBy = "${property.getOneToOneLink().getPropertyName()}" )
#else
	@Basic( optional = $property.isNullable() )
	@OneToOne ( fetch = FetchType.#lazyOneToOne()#if ($property.isOneToOneCascadeEnabledByConfig()), cascade = CascadeType.ALL #end)
	@JoinColumn(name = "${property.getOneToOneKey().keyLinks.entrySet().iterator().next().getKey()}"#if (${property.isNaturalOneToOneLink()}), referencedColumnName = "$property.getOneToOneKey().keyLinks.entrySet().iterator().next().getValue()"#end#if( $property.isNullable() ), nullable = true #end #if($class.embeddable), insertable = false, updatable = false #end)
#end
#end
#macro(doConstructorSignature)
#foreach( $property in $class.propertiesForConstructor )
#set( $value = $($velocityCount % 3) )
#if ( ($value == 1) && ($velocityCount != 1) )
					
			### some tabs
#end
$property.JavaType $property.propertyName#if ($velocityCount < $class.propertiesForConstructor.size()), #end
#end
#end

#macro(doClassMacros)
$classAnnotation
#if ($class.isEmbeddable())
@Embeddable
#else
@Entity#if($class.isNameAmbiguityPossible())(name = "${class.classPackage}.${class.className}")#end

#if ($class.isImmutable())
@org.hibernate.annotations.Entity(mutable=false)
#end
#end
#if ( $class.subclass ) 
@PrimaryKeyJoinColumn(name = "$class.extendingProperty.fieldObj.name")
#end
#if ( $class.superclass ) 
@Inheritance(strategy = InheritanceType.JOINED)
#end
#if ( (${class.isEmbeddable()} == false) && ((${this.isDifferentCase($class)} == true) || (${this.hasUnderscores($class)} == true) || ( (${this.isSchemaRestricted()} == true)  )))
@Table(name = "$class.tableObj.dbName"#if(!$restrictCatalog), catalog = "$class.tableObj.dbCat"#end)
#end
#if ( (${class.isGeneratedValueUUID()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-uuid",
	strategy = "uuid",
	 parameters = {
      	  @Parameter(name = "separator", value = "-")
	    }
)
#end
#if ( (${class.isGeneratedValueGUID()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-guid",
	strategy = "guid"
)
#end
#if ( (${class.isGeneratedValueCustom()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-custom",
	strategy = "com.felees.hbnpojogen.persistence.impl.CustomGeneratedId"
)
#end
#if ( (${class.isGeneratedValueIDAware()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-idaware",
	strategy = "com.felees.hbnpojogen.persistence.impl.IDPresentAwareGenerator"
)
#end
#if ($class.isDynamicUpdatesInserts())
@org.hibernate.annotations.Entity(
	dynamicInsert = true, dynamicUpdate = true
)
#end
#end
#################################### END MACROS ####################
#foreach( $import in $imports )
import $import;
#end
#set ($fullTypeOfId = "---")


/** 
 * Object mapping for hibernate-handled table: ${class.tableObj.dbName}.
 * @author autogenerated
 */
#doClassMacros()
public #doClassType()class $class.className$this.doExtends($class) implements #if (!$class.isSubclass())Cloneable, Serializable, #end#if (!$class.isEmbeddable() && !$class.isSubclass())IPojoGenEntity,#end I$class.className#foreach ($interface in $customInterfaces), $interface#end {

	/** Serial Version UID. */
	private static final long serialVersionUID = $serial;
$classCustomCodeFields
#if (!$class.isEmbeddable() && !$class.hasEmbeddableClass() && !$class.isSubclass())
	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, ${class.getTypeOfId()}> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, ${class.getTypeOfId()}>());
	
	/** hashCode temporary storage. */
#if (${class.getTypeOfId()} == "Boolean")
	private volatile Integer hashCode;
#else	
	private volatile ${class.getTypeOfId()} hashCode;
#end
#end
	
#foreach( $property in $properties )

	/** Field mapping. */
#foreach ($annotation in $property.propertyLevelAnnotations)
	$annotation
#end
#if ( $property.oneToMany  && !$property.isOneToNBackLinkDisabled() )
#if ( $class.embeddable || $class.isCompositePrimaryKey() )
#oneToManyAnnotation($property)
#end
	private Set<$property.JavaType> ${property.nicePropertyName} = new HashSet<${property.JavaType}>();
#else
#if ( $property.ManyToMany )
	private Set<$property.manyToManyLink.dstProperty.clazz.className> ${property.nicePropertyName} = new HashSet<${property.manyToManyLink.dstProperty.clazz.className}>();
#else	
#if	( $property.idField )
#if ( $class.embeddable || $class.isCompositePrimaryKey() ) 
	@Id 
#end
#set ($fullTypeOfId =  "$property.JavaType")
#end
#end
#if ( $class.embeddable || $class.isCompositePrimaryKey() )
### Hibernate is a bit broken - it wants the identifiers here in the composite key (embeddable) case
#foreach ( $propAnnotation in	$property.getValidatorAnnotations() )
	$propAnnotation
#end
#if (!$property.getColumnAnnotation().isEmpty())
	$property.getColumnAnnotation()
#end
#doAnnotations()
	private $property.JavaType $property.propertyName;
#else
##### The bug we're talking about below is: 
##### See http://opensource.atlassian.com/projects/hibernate/browse/HHH-2326?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_25739
#if ( ! $property.isManyToMany() )
	private $property.javaType $property.propertyName#if ( $property.idField && $property.fieldObj.autoInc ) = $this.getHibernateBugWorkaround($property); // init for hibernate bug workaround#{else};#end
#end
#end
#end
#end

##
## Constructors
##
##
#if ($fullTypeOfId != "---")
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public ${class.className}() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public ${class.className}($fullTypeOfId id) {
		this.id = id;
	}
	
#if ($class.propertiesForConstructor.size() > 1)
	/** Constructor taking a given ID.
#foreach( $property in $class.propertiesForConstructor ) 
	 * @param $property.propertyName $property.JavaType object;
#end
	 */
	public ${class.className}(#doConstructorSignature()) {

#foreach( $property in $class.propertiesForConstructor ) 
		this.$property.propertyName = $property.propertyName;
#end
	}
	
#end
#end
 

#if($class.subclass && $isSubtypeGenerationEnabled)
	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return ${class.extendsFrom.clazz.className}SubclassType enum.
 	 */
 	@Transient
 	@Override
 	public ${class.extendsFrom.clazz.className}SubclassType get${class.extendsFrom.clazz.className}SubclassType() {
		return ${class.extendsFrom.clazz.className}SubclassType.$this.convertCamelCaseToEnum(${class.className});
 	}  
#end

#if($class.superclass && $isSubtypeGenerationEnabled)
 	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return ${class.className}SubclassType enum.
 	 */
 	@Transient
 	public ${class.className}SubclassType get${class.className}SubclassType() {
		return ${class.className}SubclassType.NOT_A_CHILD;
 	}  
 #end
 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
#if($class.subclass)
	@Override
#end
	@Transient
	public Class<?> getClassType() {
		return ${class.className}.class;
	}
 
#foreach( $property in $properties )
#doCalcFullType()
##
##
## Getters
##
##

    /**
     * Return the value associated with the column: $property.propertyName.
	 * @return A $fullJDType object (this.$property.propertyName)
	 */
#if ( ($property.idField) && (! $class.subclass) && (! $class.compositePrimaryKey ))
    @Id 
#end
#if ($property.isTransientField())
    @Transient    
#end
#if (! $class.embeddable  )
#doAnnotations()
#foreach ( $propAnnotation in	$property.getValidatorAnnotations() )
	$propAnnotation
#end
#if (!$property.getColumnAnnotation().isEmpty())
	@Basic( optional = $property.isNullable() )
	$property.getColumnAnnotation()
#if (!$property.getSequenceAnnotation().isEmpty())
	$property.getSequenceAnnotation()
#end	
#end
#end
#foreach ($annotation in $property.methodLevelAnnotationsOnGetters)
	$annotation
#end
	public $fullType #prefix()${property.niceJavaName}() {
#foreach ($annotation in $property.methodLevelGettersPrecondition)
	$annotation
#end
		return this.${property.nicePropertyName};
#foreach ($annotation in $property.methodLevelGettersPostcondition)
	$annotation
#end
		
	}
	
##
##
## one-to-many
##
##
#if ( $property.oneToMany)
	/**
	 * Adds a bi-directional link of type ${property.JavaName} to the ${property.nicePropertyName} set.
	 * @param $property.propertyName item to add
	 */
	public void add${property.JavaName}(${property.javaType} $property.propertyName) {
#foreach ($annotation in $property.methodLevelSettersPrecondition)
		$annotation
#end
		${property.propertyName}.#if (${property.oneToManyLink.clazz.isEmbeddable()})getId().#{end}set${property.oneToManyLink.javaName}(this);
		this.${property.nicePropertyName}.add($property.propertyName);
#foreach ($annotation in $property.methodLevelSettersPostcondition)
		$annotation
#end
	}
#end	
##
##
##
## many-to-many
##
##
#if ( $property.ManyToMany )
	/**
#if (!${property.manyToManyLink.dstProperty.isOneToNBackLinkDisabled()})
	 * Adds a bi-directional link of type ${property.JavaName} to the set.
#else
	  * Equivalent to ${property.nicePropertyName}.add($property.propertyName)
	  * (bi-directional capability has been disabled via config)
#end
	 * 
	 * @param $property.propertyName item to add
	 */
	public void add${property.JavaName}(${property.javaType} $property.propertyName) {
#if (!${property.manyToManyLink.dstProperty.isOneToNBackLinkDisabled()})
		${property.propertyName}.get${property.manyToManyLink.dstProperty.niceJavaName}().add(this);
#end
#foreach ($annotation in $property.methodLevelSettersPrecondition)
		$annotation
#end
		this.${property.nicePropertyName}.add($property.propertyName);
#foreach ($annotation in $property.methodLevelSettersPostcondition)
		$annotation
#end
	}
#end

##
##
## Setters
##
##
  
    /**  
     * Set the value related to the column: $property.propertyName.
	 * @param $property.propertyName the $property.propertyName value you wish to set
	 */
#foreach ($annotation in $property.methodLevelAnnotationsOnSetters)
	$annotation
#end
	public void set${property.niceJavaName}(final $fullType $property.propertyName) {
#foreach ($annotation in $property.methodLevelSettersPrecondition)
		$annotation
#end
#if (${property.isIdField()} && !$class.hasEmbeddableClass())
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null #if ($class.getTypeOfId().equals("Long"))|| this.id == 0L#{end}#if ($class.getTypeOfId().equals("Integer"))|| this.id == 0#{end}) &&
				(id != null) &&
				(this.hashCode != null) ) {
#if (${class.getTypeOfId()} == "Boolean")
			SAVED_HASHES.put( id, this.hashCode == 1);
#else
		SAVED_HASHES.put( id, this.hashCode );
#end			
		}
#end
		this.$property.nicePropertyName = $property.propertyName;
#foreach ($annotation in $property.methodLevelSettersPostcondition)
	$annotation
#end
	}
#end

## Join Tables
#foreach ($joinMap in $class.joinMappings)
	/** 
	* Utility method to add a ${joinMap.dstProperty.clazz.className} by using the link class table ($joinMap.linkClass.className).
#if ($joinMap.dstProperty.isOneToNBackLinkDisabled())
	* This method usually takes care of maintaining the proper bidirectional links, 
	* but backlinks have been disabled to the target object so full bi-directionality 
	* is disabled in this method (but retained for API consistency).
#end  
	* @param ${joinMap.dstProperty.clazz.getClassPropertyName()} ${joinMap.dstProperty.clazz.className} object to add
	* @return $joinMap.linkClass.className The linker object. 
	*/
	public $joinMap.linkClass.className add${joinMap.dstProperty.clazz.className}(${joinMap.dstProperty.clazz.className} ${joinMap.dstProperty.clazz.getClassPropertyName()}) {
		$joinMap.linkClass.className $joinMap.linkClass.getClassPropertyName() = new ${joinMap.linkClass.className}();
		${joinMap.linkClass.getClassPropertyName()}.set${class.className}(this);
		${joinMap.linkClass.getClassPropertyName()}.set${joinMap.dstProperty.oneToManyLink.JavaName}($joinMap.dstProperty.clazz.getClassPropertyName());
		
		this.${joinMap.linkClass.getNiceClassPropertyName()}.add($joinMap.linkClass.getClassPropertyName());
#if (!$joinMap.dstProperty.isOneToNBackLinkDisabled())
		${joinMap.dstProperty.clazz.getClassPropertyName()}.get${joinMap.linkClass.niceClassName}().add($joinMap.linkClass.getClassPropertyName());
#end
		// return the map in case we have additional fields to populate
		return $joinMap.linkClass.getClassPropertyName();
	}
#end
##
##
## toString, equals, hashcode and clone....
##
##	

## Do not create getters for abstract classes - chrisp
   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public $class.className clone() throws CloneNotSupportedException {
		
        final $class.className copy = ($class.className)super.clone();

#foreach( $property in ${class.getPropertiesWithoutPFKNoBackLinks()} )
#if ( ($property.OneToMany == true ) || ($property.ManyToMany == true) )
		if (this.#prefix()${property.niceJavaName}() != null) {
			copy.get${property.niceJavaName}().addAll(this.#prefix()${property.niceJavaName}());
		}
#else
		copy.set${property.niceJavaName}(this.#prefix()${property.niceJavaName}());
#end
#end
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
#foreach( $property in $properties )
#if (! $property.manyToMany && (! $property.oneToMany) && (! $property.manyToOne) && (! $property.oneToOne) )
		sb.append("${property.nicePropertyName}: " + #if ($property.isArrayType())(this.${property.propertyName} == null ? null : Arrays.toString(#{end}this.#prefix()${property.niceJavaName}()#if ($property.isArrayType())))#end#if ($velocityCount < $properties.size()) + ", ");#{else});#end

#end
#end
#if ($class.isSubclass() )
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
#end
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
#if ($class.hasEmbeddableClass())
		if ( this == aThat ) {
			 return true;
		}

		if ((aThat == null) || ( !(aThat.getClass().equals(this.getClass())))) {
			 return false;
		}
	
		final $class.className that = ($class.className) aThat;
		return this.getId().equals(that.getId());
#else
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

#if (!${class.isEmbeddable()} && !$class.hasEmbeddableClass())
		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
#end
		if (aThat == null)  {
			 return false;
		}
		
#if ($properties.size() == 0)
		return true;
#else 
		final $class.className that; 
		try {
			that = ($class.className) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
#if ( $class.subclass) 
		if (this.getClass().getSuperclass() != this.getClass()) {
			result = super.equals(that);
		}
#end
#if (!$class.isEmbeddable())
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
#end
#foreach( $property in $properties )
#if (!$property.isExcludedFromEquality() && !$property.isIdField()  && !$property.isOneToMany() && !$property.isManyToMany())
#if ($property.isManyToOne())
		result = result && (((#prefix()${property.niceJavaName}() == null) && (that.#prefix()${property.niceJavaName}() == null)) || (#prefix()${property.niceJavaName}() != null && #prefix()${property.niceJavaName}().getId().equals(that.#prefix()${property.niceJavaName}().getId())));	
#else
		result = result && (((#prefix()${property.niceJavaName}() == null) && (that.#prefix()${property.niceJavaName}() == null)) || (#prefix()${property.niceJavaName}() != null && #prefix()${property.niceJavaName}().equals(that.#prefix()${property.niceJavaName}())));
#end
#end
#end
		return result;
#end
#end
	}
	
#if (!$class.isSubclass())	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
#if ($class.hasEmbeddableClass())
		return getId().hashCode();
#else
#if (!$class.isEmbeddable())
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
#if (${class.getTypeOfId()} == "Boolean")
					Integer newHashCode = null;
#else
					${class.getTypeOfId()} newHashCode = null;
#end

					if ( getId() != null ) {
#if (${class.getTypeOfId()} == "Boolean")
						newHashCode = SAVED_HASHES.get( getId() ) ? 1 : 0;
#else
					newHashCode = SAVED_HASHES.get( getId() );
#end
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null #if ($class.getTypeOfId().equals("Long"))&& getId() != 0L#{end}#if ($class.getTypeOfId().equals("Integer"))&& getId() != 0#{end}) {
#if (${class.getTypeOfId()} == "Boolean")
							newHashCode = getId() ? 1 : 0;
#else
							newHashCode = getId();
#end
						} else {
#if (${class.getTypeOfId()} == "Long")						
							newHashCode = (long) super.hashCode();
#else
#if (${class.getTypeOfId()} == "String")
						newHashCode = String.valueOf(super.hashCode());
#else
#if (${class.getTypeOfId()} == "Boolean")
							newHashCode = (int)super.hashCode();
#else
#if (${class.getTypeOfId()} == "Byte")
							newHashCode = (byte)super.hashCode();
#end							
#end							
#end						
#end

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
#if (${class.getTypeOfId()} == "Long")		
		return (int) (this.hashCode & 0xffffff);
#else
#if (${class.getTypeOfId()} == "String")
	return this.hashCode.hashCode();
#else
	return this.hashCode;
#end		
#end
#else
	int hash = 0;
#foreach( $property in $properties )
		hash = hash + #prefix()${property.javaName}().hashCode();
#end
	return hash;
#end
#end
	}
#end	
	
$classCustomCode
	
}
