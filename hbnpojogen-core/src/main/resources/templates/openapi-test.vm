// Autogenerated class, probably requires tweaking
package ${packageToUse};

import ${toplevel}.AbstractGenericTest;

import ${toplevel}.db.model.repository.*;
import ${toplevel}.model.*;

import ${toplevel}.db.model.generated.*;
import ${toplevel}.db.model.generated.factories.*;
import ${openapiCommonPackage}.beans.CommonBeansAutoConfiguration;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringRunner;
import static org.springframework.restdocs.payload.PayloadDocumentation.*;



@SpringBootTest
@RunWith(SpringRunner.class)
@ComponentScan(basePackageClasses = ${toplevel}.Application.class)
@Import(CommonBeansAutoConfiguration.class)
@WithMockUser("xyz")
public class GeneratedDocsTest extends AbstractGenericTest{


#foreach ( $class in $classes )
#if (!$class.isHiddenJoinTable())
    @Autowired
    ${class.className}Repository ${class.getClassPropertyName()}Repository;

#end
#end
#foreach ( $class in $classes )
#if (!$class.isHiddenJoinTable())


    @Test
    public void shouldGet${class.getNiceClassName()}() throws Exception {

    ${class.getMaybeExpandClassName()} ${class.tableObj.testHandle} = ${class.getDataPoolFactoryImpl()}.get${class.className}();
    ${class.getClassPropertyName()}Repository.save(${class.tableObj.testHandle});


        retrieve("/${class.toKebabCase()}", ${class.tableObj.testHandle}.getId(), ${class.className}Dto.class, "get${class.getNiceClassName()}",
                responseFields(
#foreach( $property in $class.getOpenApiTestProperties() )
                    fieldWithPath("content[].${property.propertyName}").description("${property.fieldObj.comment}")#if ($property.fieldObj.nullable).optional()#end#if ($velocityCount < $class.getOpenApiTestProperties().size()),#end

#end
                ).and(standardListFieldDescriptors)
        );
    }


    @Test
    public void shouldRetrieveSingle${class.className}() throws Exception{
        ${class.getMaybeExpandClassName()} ${class.tableObj.testHandle} = ${class.getDataPoolFactoryImpl()}.get${class.className}();
        ${class.tableObj.testHandle} = ${class.getClassPropertyName()}Repository.save(${class.tableObj.testHandle});
        String id = entityIdUtils.encrypt(${class.tableObj.testHandle}.getId());


        executeGetCall("/${class.toKebabCase()}/{id}", new String[]{id}, "getSingle${class.className}",
                responseFields(
#foreach( $property in $class.getOpenApiTestProperties() )
                    fieldWithPath("${property.propertyName}").description("${property.fieldObj.comment}")#if ($property.fieldObj.nullable).optional()#end#if ($velocityCount < $class.getOpenApiTestProperties().size()),#end

#end
                ),
                null
        );
    }

    @Test
    public void shouldCreateNew${class.className}() throws Exception {

    ${class.getMaybeExpandClassName()} ${class.tableObj.testHandle} = ${class.getDataPoolFactoryImpl()}.get${class.className}();
    ${class.getClassPropertyName()}Repository.save(${class.tableObj.testHandle});



    ConstrainedFields fields = new ConstrainedFields(${class.className}Dto.class);

        // hard-coded so that we break if we ever change API
        String request = "${class.generateJsonExample()}";

        createNew("/${class.toKebabCase()}/", request, ${class.getClassPropertyName()}Repository, "add${class.className}", requestFields(
#foreach( $property in $class.getOpenApiTestProperties() )
            fields.withPath("${property.nicePropertyName}").description("${property.fieldObj.comment}")#if ($velocityCount < $class.getOpenApiTestProperties().size()),#end

#end
            )
        );
    }

#end
#end
}