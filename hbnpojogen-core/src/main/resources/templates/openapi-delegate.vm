package ${toplevel}.controller.delegate;

import ${toplevel}.${class.className}ApiController;
import ${toplevel}.db.model.generated.${class.className};
import ${toplevel}.db.model.repository.${class.className}Repository;
import ${toplevel}.model.${class.className}Dto;
import ${openapiCommonPackage}.controller.AbstractCommonCrudService;
import ${openapiCommonPackage}.controller.CommonCrudService;
import ${openapiCommonPackage}.entity.EntityId;
import com.querydsl.core.types.Predicate;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import java.security.Principal;

@Component @Slf4j
public class ${class.className}ApiDelegateImpl extends AbstractCommonCrudService implements ${toplevel}.${class.className}ApiDelegate, CommonCrudService<${class.className}, ${class.className}ApiController>  {

    @Override
    public void update${class.className}(${class.className}Dto ${class.className.toLowerCase()}Dto, HttpHeaders headers, Principal principal) {
        update(${class.className.toLowerCase()}Dto.getId(), ${class.className.toLowerCase()}Dto, principal);
    }


    @Override
    public ${class.className}Dto get${class.className}ById(EntityId ${class.getClassPropertyName()}Id, HttpHeaders headers, Principal principal) {
        return getById(${class.getClassPropertyName()}Id, principal, ${class.className}Dto.class);
    }


    @Override
    public Page<${class.className}Dto> get${class.niceClassName}(Predicate predicate, Pageable pageable, Sort sortable, HttpHeaders headers, Principal principal) {
        return get${class.niceClassName}(predicate, pageable, sortable, headers, principal);
    }

    @Override
    public ResponseEntity<${class.className}Dto> create${class.className}(${class.className}Dto ${class.getClassPropertyName()}Dto, HttpHeaders headers, Principal principal) {
        return (ResponseEntity<${class.className}Dto>) add(${class.getClassPropertyName()}Dto, principal);
    }
}
